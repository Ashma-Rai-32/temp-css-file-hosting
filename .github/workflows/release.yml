name: Auto Release

on:
  push:
    branches:
      - main # Trigger the workflow on push to the main branch

permissions:
  contents: write # Grant permission to create a release

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Retrieve the latest tag or set to v0.0.0 if no tags exist
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          # Define new starting version
          new_start_version="v0.0.0"
          latest_tag="${{ env.latest_tag }}"
          if [ "$latest_tag" = "$new_start_version" ]; then
            new_version=$new_start_version
          else
            # Increment version
            version="${latest_tag#v}"  # Remove the 'v' prefix
            IFS='.' read -r major minor patch <<< "$version"
            new_patch=$((patch + 1))
            new_version="v$major.$minor.$new_patch"
          fi
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag_exists
        run: |
          # Check if the tag already exists
          tag_exists=$(git tag -l "${{ env.new_version }}" | wc -l)
          if [ "$tag_exists" -ne 0 ]; then
            echo "Tag ${{ env.new_version }} already exists. Incrementing patch version."
            exit 1
          fi

      - name: Create a new release
        if: failure() # Runs only if the previous step fails
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: "Release ${{ env.new_version }}"
          draft: false
          prerelease: false

      - name: Handle tag increment failure
        if: failure() # Runs only if the previous step fails
        run: |
          echo "Creating release for the next incremented version."
          # Handle the incremented version
          # ... (Add logic here if needed)
